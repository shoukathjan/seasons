{"version":3,"sources":["SeasonDisplay.js","Spinner.js","index.js"],"names":["seasonConfig","winter","text","iconName","summer","SeasonDisplay","props","lat","month","season","Date","getMonth","className","Spinner","message","defaultProps","App","state","errorMessage","window","navigator","geolocation","getCurrentPosition","position","setState","coords","latitude","err","this","renderContent","React","Component","ReactDOM","render","document","querySelector"],"mappings":"8MAGMA,EAAc,CAClBC,OAAQ,CACNC,KAAO,qBACPC,SAAW,+BAEbC,OAAQ,CACNF,KAAO,oBACPC,SAAW,4BAmCAE,EAtBO,SAAAC,GACpB,IAVkBC,EAAMC,EAUlBC,GAVYF,EAUQD,EAAMC,KAVRC,GAUc,IAAIE,MAAOC,YATrC,GAAKH,EAAQ,GAClBD,EAAM,EAAI,SAAW,SAErBA,EAAM,EAAI,SAAW,UAa5B,EAA2BP,EAAaS,GAAhCN,EAAR,EAAQA,SAAWD,EAAnB,EAAmBA,KAEnB,OAAQ,sBAAKU,UAAS,yBAAsBH,GAApC,UAEN,mBAAGG,UAAS,4BAAwBT,KACpC,6BAAKD,IACL,mBAAGU,UAAS,6BAA0BT,SCnCpCU,EAAU,SAACP,GACb,OACF,qBAAKM,UAAU,4BAAf,SACE,qBAAKA,UAAU,qBAAf,SAAsCN,EAAMQ,aAKhDD,EAAQE,aAAc,CAClBD,QAAS,eAEED,Q,ICHTG,E,kDACE,WAAYV,GAAQ,IAAD,8BACf,cAAMA,IAIDW,MAAQ,CAAEV,IAAK,KAAMW,aAAc,IAKxCC,OAAOC,UAAUC,YAAYC,oBACzB,SAACC,GAEG,EAAKC,SAAS,CAAEjB,IAAKgB,EAASE,OAAOC,cAEzC,SAACC,GACG,EAAKH,SAAS,CAAEN,aAAcS,EAAIb,aAhB3B,E,iDAqBnB,WACI,OAAIc,KAAKX,MAAMV,MAAQqB,KAAKX,MAAMC,aACvB,cAAC,EAAD,CAAeX,IAAOqB,KAAKX,MAAMV,OAChCqB,KAAKX,MAAMV,KAAOqB,KAAKX,MAAMC,aAC9B,2CAAeU,KAAKX,MAAMC,aAA1B,OAEJ,oCAAM,cAAC,EAAD,CAASJ,QAAU,qBAAzB,S,oBAMX,WACI,OACA,8BAAMc,KAAKC,sB,GApCLC,IAAMC,WAyCxBC,IAASC,OAAO,cAAC,EAAD,IAASC,SAASC,cAAc,Y","file":"static/js/main.f468585d.chunk.js","sourcesContent":["import './SeasonDisplay.css';\nimport React from 'react';\n\nconst seasonConfig= {\n  winter: {\n    text : 'HuHuu.. Its winter',\n    iconName : 'teal snowflake outline icon',\n  },\n  summer: {\n    text : 'Aaah Its summerrr',\n    iconName : 'orange sun outline icon',\n  }\n};\n\nconst getSeason = ( lat , month ) =>{\n  if( month > 2 && month < 10){\n  return lat > 0 ? 'summer' : 'winter' ;\n}else {\n  return lat > 0 ? 'winter' : 'summer' ;\n}\n};\n\n\nconst SeasonDisplay = props => {\n  const season = getSeason( props.lat , new Date().getMonth());\n  // console.log(season);\n\n  // const text = season==='winter'?'HuHuu.. Its winter':'Aaah Its summerrr'\n  // const icon = season==='winter'?'snowflake icon':'sun icon'\n\n\n  const { iconName , text} = seasonConfig[season]\n\n  return (<div className = {`season-display ${season}`}>\n    {/* console.log( 'massive {iconName}'); */}\n    <i className= {`icon-left massive ${iconName}`}/>\n    <h1>{text}</h1>\n    <i className=  {`icon-right massive ${iconName}`}/>\n    {/* <i class=\"icon-left massive snowflake outline icon\"></i> */}\n    {/* <i class=\"icon-right massive snowflake icon\"></i> */}\n\n    </div>\n  );\n}\n\nexport default SeasonDisplay;\n","import React from 'react';\r\n\r\nconst Spinner = (props) => {  \r\n    return (\r\n  <div className=\"ui active inverted dimmer\">\r\n    <div className=\"ui big text loader\">{ props.message }</div>\r\n  </div>\r\n);\r\n};\r\n\r\nSpinner.defaultProps ={\r\n    message: 'Loading....'\r\n}\r\nexport default Spinner;","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport SeasonDisplay from \"./SeasonDisplay\";\nimport Spinner from \"./Spinner\";\n\n\nif (module.hot) {\n    module.hot.accept();\n}\n\nclass App extends React.Component {\n        constructor(props) {\n            super(props);\n\n            // THIS IS THE ONLY TIME we do direct assignment\n            // to this.state\n            this.state = { lat: null, errorMessage: \"\" };\n//without using constructor we can directly initialize state as below\n// state = { lat: null, errorMessage: ''};\n\n\n            window.navigator.geolocation.getCurrentPosition(\n                (position) => {\n                    // we called setstate!!!!\n                    this.setState({ lat: position.coords.latitude });\n                },\n                (err) => {\n                    this.setState({ errorMessage: err.message });\n                }\n            );\n        }\n\n        renderContent(){\n            if (this.state.lat && !this.state.errorMessage) {\n                return <SeasonDisplay lat = {this.state.lat} />\n            } else if (!this.state.lat && this.state.errorMessage) {\n                return <div> Error: { this.state.errorMessage } </div>\n            }\n            return <div> <Spinner message = 'Getting Location' /> </div >\n        };\n\n        \n\n        // React says we have to define render!!\n        render() {\n            return(\n            <div>{this.renderContent()}</div>\n        );\n        };\n    \n}\nReactDOM.render(<App/> , document.querySelector(\"#root\"));"],"sourceRoot":""}